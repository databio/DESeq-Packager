setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt <- dt[, relevant_data_col:=as.integer(relevant_data_col)] #convert the FPKM data to integers for DESeq
#dt <- rename(dt, replace = c(relevant_data_col = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt <- dt[, "FPKM":=as.integer(relevant_data_col)] #convert the FPKM data to integers for DESeq
#dt <- rename(dt, replace = c(relevant_data_col = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt <- dt[, "FPKM":=as.integer("FPKM")] #convert the FPKM data to integers for DESeq
#dt <- rename(dt, replace = c(relevant_data_col = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt <- dt[, FPKM:=as.integer(FPKM)] #convert the FPKM data to integers for DESeq
#dt <- rename(dt, replace = c(relevant_data_col = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt <- dt[, FPKM:=as.integer(FPKM)] #convert the FPKM data to integers for DESeq
######make this part accept relevant_data_col parameter
dt <- rename(dt, replace = c(relevant_data_col = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt <- dt[, FPKM:=as.integer(FPKM)] #convert the FPKM data to integers for DESeq
######make this part accept relevant_data_col parameter
#dt <- rename(dt, replace = c(relevant_data_col = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt <- dt[, FPKM:=as.integer(FPKM)] #convert the FPKM data to integers for DESeq
######make this part accept relevant_data_col parameter
dt <- rename(dt, replace = c(FPKM = paste(type[i], FPKM, sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt <- dt[, FPKM:=as.integer(FPKM)] #convert the FPKM data to integers for DESeq
######make this part accept relevant_data_col parameter
dt <- rename(dt, replace = c(FPKM = paste(type[i], "FPKM", sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
dt <- dt[, dt[,2]:=as.integer(dt[,2])] #convert the FPKM data to integers for DESeq
dt <- dt[, dt[[2]]:=as.integer(dt[[2]])] #convert the FPKM data to integers for DESeq
?:=
dt <- dt[, dt[[2]]=as.integer(dt[[2]])] #convert the FPKM data to integers for DESeq
dt[[2]]=as.integer(dt[[2]])
dt[2]=as.integer(dt[2])
transform(dt, dt[[2]] = as.integer(dt[[2]]) )
transform(dt, FPKM = as.integer(dt[[2]]) )
transform(dt, FPKM = as.integer(FPKM) )
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
#dt <- dt[, dt[[2]]=as.integer(dt[[2]])] #convert the FPKM data to integers for DESeq
######make this part accept relevant_data_col parameter
dt <- transform(dt, FPKM = as.integer(FPKM) )
dt <- rename(dt, replace = c(FPKM = paste(type[i], "FPKM", sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
?noquotes
?noquote
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
#dt <- dt[, dt[[2]]=as.integer(dt[[2]])] #convert the FPKM data to integers for DESeq
######make this part accept relevant_data_col parameter
dt <- transform(dt, noquote(relevant_data_col) = as.integer(noquote(relevant_data_col)) )
dt <- rename(dt, replace = c(FPKM = paste(type[i], "FPKM", sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
#dt <- dt[, dt[[2]]=as.integer(dt[[2]])] #convert the FPKM data to integers for DESeq
######make this part accept relevant_data_col parameter
dt <- transform(dt, noquote(relevant_data_col) = as.integer(noquote(relevant_data_col)) )
dt <- rename(dt, replace = c(FPKM = paste(type[i], "FPKM", sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
dt <- transform(dt, noquote(relevant_data_col) = as.integer(noquote(relevant_data_col)) )
dt <- transform(dt, FPKM = as.integer(FPKM) )
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
#dt <- dt[, dt[[2]]=as.integer(dt[[2]])] #convert the FPKM data to integers for DESeq
######make this part accept relevant_data_col parameter
dt <- transform(dt, FPKM = as.integer(FPKM) )
dt <- rename(dt, replace = c(FPKM = paste(type[i], "FPKM", sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
dt <- dt[, noquote(relevant_data_col) = as.integer(noquote(relevant_data_col))]
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
#dt <- dt[, dt[[2]]=as.integer(dt[[2]])] #convert the FPKM data to integers for DESeq
######make this part accept relevant_data_col parameter
#dt <- transform(dt, FPKM = as.integer(FPKM) )
dt <- dt[, noquote(relevant_data_col) = as.integer(noquote(relevant_data_col))]
dt <- rename(dt, replace = c(FPKM = paste(type[i], "FPKM", sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
#dt <- dt[, dt[[2]]=as.integer(dt[[2]])] #convert the FPKM data to integers for DESeq
######make this part accept relevant_data_col parameter
#dt <- transform(dt, FPKM = as.integer(FPKM) )
#dt <- dt[, noquote(relevant_data_col) = as.integer(noquote(relevant_data_col))]
dt <- rename(dt, replace = c(FPKM = paste(type[i], "FPKM", sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
dt <- dt[, noquote(relevant_data_col) = as.integer(noquote(relevant_data_col))]
as.integer(dt[[2]])
mtcars[[9]]
mtcars[[1]]
mtcars
iris[[1]]
iris
iris[[2]]
as.integer(iris[[2]])
iris
iris[[2]] = as.integer(iris[[2]])
iris
dt[[2]] = as.integer(dt[[2]])
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
#dt <- dt[, dt[[2]]=as.integer(dt[[2]])] #convert the FPKM data to integers for DESeq
######make this part accept relevant_data_col parameter
#dt <- transform(dt, FPKM = as.integer(FPKM) )
#dt <- dt[, noquote(relevant_data_col) = as.integer(noquote(relevant_data_col))]
dt[[2]] = as.integer(dt[[2]])
dt <- rename(dt, replace = c(FPKM = paste(type[i], "FPKM", sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt[[2]] = as.integer(dt[[2]]) #convert the FPKM data to integers, required for DESeq
dt <- rename(dt, replace = c(FPKM = paste(type[i], "FPKM", sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
merging <- function(list){
countTable <- merge(list[[1]], list[[2]], by = gene_name_col)
for(i in 3:length(list)){
countTable <- merge(countTable, list[[i]])
}
return(countTable)
}
countTable <- merging(list_files)
View(countTable)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt[[2]] <- as.integer(dt[[2]]) #convert the FPKM data to integers, required for DESeq
dt <- rename(dt, replace = c(noquote(relevant_data_col) = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt[[2]] <- as.integer(dt[[2]]) #convert the FPKM data to integers, required for DESeq
dt <- rename(dt, replace = c(dt[[2]] = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt[[2]] <- as.integer(dt[[2]]) #convert the FPKM data to integers, required for DESeq
dt <- rename(dt, replace = c(FPKM = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data ex: HighDMSO1_FPKM
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
iris
?rename
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt[[2]] <- as.integer(dt[[2]]) #convert the FPKM data to integers, required for DESeq
dt <- rename(dt, c(relevant_data_col = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
countTable <- merge(list[[1]], list[[2]], by = gene_name_col)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt[[2]] <- as.integer(dt[[2]]) #convert the FPKM data to integers, required for DESeq
dt <- rename(dt, c("FPKM" = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
######also make this part accept relevant_data_col parameter
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
merging <- function(list){
countTable <- merge(list[[1]], list[[2]], by = gene_name_col)
for(i in 3:length(list)){
countTable <- merge(countTable, list[[i]])
}
return(countTable)
}
list_files
?names
names(dt)[2]
names(countTable)[2]
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt[[2]] <- as.integer(dt[[2]]) #convert the FPKM data to integers, required for DESeq
#dt <- rename(dt, c("FPKM" = paste(type[i], relevant_data_col, sep = "_"))) #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
######also make this part accept relevant_data_col parameter
names(dt)[2] <- paste(type[i], relevant_data_col, sep = "_")
output[[i]] <- dt #add datatable to the list
names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data (FPKM)
dt[[2]] <- as.integer(dt[[2]]) #convert the FPKM data to integers, required for DESeq
names(dt)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- dt #add datatable to the list
#names(output)[i] <- file
i <- i+1
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
merging <- function(list){
countTable <- merge(list[[1]], list[[2]], by = gene_name_col)
for(i in 3:length(list)){
countTable <- merge(countTable, list[[i]])
}
return(countTable)
}
countTable <- merging(list_files)
View(countTable)
import pep
import pepr
importIntoEnv(pepr)
devtools::install_github("pepkit/pepr")
p = pepr::Project(file="project_config.yaml")
install.packages("waffle")
library(waffle)
uva_diningdata <- data.frame()
uva_diningdata <- data.frame(
diners = c("Newcomb", "O'Hill", "Runk")
)
uva_diningdata <- data.frame(
diners = c("Newcomb", "O'Hill", "Runk")
days_with_seafood = c(30, 15, 35)
)
uva_diningdata <- data.frame(
diners = c("Newcomb", "O'Hill", "Runk")
days_with_seafood = c(30, 15, 35)
)
uva_diningdata <- data.frame(
diners = c("Newcomb", "O'Hill", "Runk")
vals = c(30, 15, 35)
)
uva_diningdata <- data.frame(
diners = c("Newcomb", "O'Hill", "Runk")
vals = c(30, 15, 35)
)
uva_diningdata <- data.frame(
diners = c("Newcomb", "O'Hill", "Runk")
vals = c(30, 15, 35)
)
uva_diningdata <- data.frame(
diners = c("Newcomb", "O'Hill", "Runk"),
vals = c(30, 15, 35)
)
View(uva_diningdata)
waffle(uva_diningdata, rows = 3)
?waffle
waffle(uva_diningdata, rows = 3)
parts <- data.frame(
names = LETTERS[1:4],
vals = c(80, 30, 20, 10)
)
waffle(parts, rows = 5)
packageVersion("waffle")
library(waffle)
install.packages("waffle")
install.packages("waffle")
packageVersion("waffle")
parts <- c(80, 30, 20, 10)
waffle(parts, rows = 5)
?waffle
library(waffle)
waffle(parts, rows = 5)
?waffle
?use_glyph
waffle(parts, rows=8, use_glyph="shield")
install.packages( https://github.com/FortAwesome/Font-Awesome/tree/master/fonts)
install.packages( github.com/FortAwesome/Font-Awesome/tree/master/fonts)
install.packages( https://github.com/FortAwesome/Font-Awesome/tree/master/fonts)
install.packages( https:/github.com/FortAwesome/Font-Awesome/tree/master/fonts)
install.packages( https:github.com/FortAwesome/Font-Awesome/tree/master/fonts)
waffle(c(15, 5, 2), rows = 5)
waffle(uva_diningdata)
parts <- c(`Un-breached\nUS Population`=(318-11-79), `Premera`=11, `Anthem`=79)
waffle(parts, rows=8, size=1, colors=c("#969696", "#1879bf", "#009bda"), legend_pos="bottom")
