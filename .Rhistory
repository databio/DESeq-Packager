sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_")
df_list[[n]] <- sampleTable
n <- n+1
}
print(str(df_list))
#function to merge the datatables in the list
countTable <- merge(df_list[[1]], df_list[[2]], by = gene_name_col)
for(i in 3:length(df_list)){
countTable <- merge(countTable, df_list[[i]])
}
print(str(countTable))
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
print("Finished! View the new data frame in the variable called 'countTable'")
return(countTable)
}
countTable <- DESeq_table_maker("Documents/GitHub/DESeq-Packager/project_config.yaml")
View(countTable)
condition <- factor(c("controlDMSO","controlDMSO","knockoutDMSO","knockoutDMSO"))
cds <- newCountDataSet(countTable, condition)
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds, fitType = "local")
plotDispEsts(cds)
res <- nbinomTest(cds, "knockout", "control")
res <- nbinomTest(cds, "controlDMSO", "knockoutDMSO")
plotMA(res)
resSig = res[res$padj<0.1, ]
head(resSig[order(resSig$pval), ])
head(resSig[order(resSig$pval), ])
head(resSig[order(resSig$pval), ])
rm(list=ls())
clear
clc()
clear()
countTable <- DESeq_table_maker("Documents/GitHub/DESeq-Packager/project_config.yaml")
DESeq_table_maker <- function(yaml){
#importing pepr project
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
#choose which samples to use in DESeq
beg <- 0
while(beg < 1){
beg <- as.numeric(readline(prompt="Which files do you want to use? (enter a starting index, 1-indexed): "))
}
end <- 0
while(end <= beg){
end <- as.numeric(readline(prompt="(enter an ending index, 1-indexed): "))
}
#prompting user to rename files
parameters <- c()
while(TRUE){
s <- readline(prompt= "Rename each file with identifiers for each sample (Type DONE when finished): ")
if(s=="DONE"){
break
}
parameters <- c(parameters, s)
}
type <- c()
for(column in parameters){
type <- paste(type, sample_frame[, get(column)], sep = "")
}
#prompting user to specify columns for DESeq Analysis
gene_name_col <- readline(prompt= "Specify which column in each data table is the gene name column: ")
relevant_data_col <- readline(prompt= "Specify which column contains the relevant data for DESeq analysis: ")
print("Packaging...")
#reading in the files
df_list <- vector(mode="list", length=(end-beg+1))
n <- 1
for(i in beg:end){
sampleTable <- read.table(files[i], header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_")
df_list[[n]] <- sampleTable
n <- n+1
}
print(str(df_list))
#function to merge the datatables in the list
countTable <- merge(df_list[[1]], df_list[[2]], by = gene_name_col)
for(i in 3:length(df_list)){
countTable <- merge(countTable, df_list[[i]])
}
print(str(countTable))
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
print("Finished! View the new data frame in the variable called 'countTable'")
return(countTable)
}
countTable <- DESeq_table_maker("Documents/GitHub/DESeq-Packager/project_config.yaml")
View(countTable)
type <- sample_frame[ , sample_name]
DESeq_table_maker <- function(yaml, data_source){
#importing pepr project
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
type <- sample_frame[ , sample_name]
#prompting user to specify columns for DESeq Analysis
gene_name_col <- readline(prompt= "Specify which column in each data table is the gene name column: ")
relevant_data_col <- readline(prompt= "Specify which column contains the relevant data for DESeq analysis: ")
print("Packaging...")
#reading in the files
df_list <- vector(mode="list", length=(end-beg+1))
n <- 1
for(i in beg:end){
sampleTable <- read.table(files[i], header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_")
df_list[[n]] <- sampleTable
n <- n+1
}
print(str(df_list))
#function to merge the datatables in the list
countTable <- merge(df_list[[1]], df_list[[2]], by = gene_name_col)
for(i in 3:length(df_list)){
countTable <- merge(countTable, df_list[[i]])
}
print(str(countTable))
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
print("Finished! View the new data frame in the variable called 'countTable'")
return(countTable)
}
countTable <- DESeq_table_maker("Documents/GitHub/DESeq-Packager/project_config.yaml")
countTable <- DESeq_table_maker("Documents/GitHub/DESeq-Packager/project_config.yaml")
DESeq_table_maker <- function(yaml, data_source){
#importing pepr project
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
type <- sample_frame[ , sample_name]
#prompting user to specify columns for DESeq Analysis
gene_name_col <- readline(prompt= "Specify which column in each data table is the gene name column: ")
relevant_data_col <- readline(prompt= "Specify which column contains the relevant data for DESeq analysis: ")
print("Packaging...")
#reading in the files
df_list <- vector(mode="list", length=length(files))
n <- 1
for(i in length(files)){
sampleTable <- read.table(files[i], header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_")
df_list[[n]] <- sampleTable
n <- n+1
}
print(str(df_list))
#function to merge the datatables in the list
countTable <- merge(df_list[[1]], df_list[[2]], by = gene_name_col)
for(i in 3:length(df_list)){
countTable <- merge(countTable, df_list[[i]])
}
print(str(countTable))
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
print("Finished! View the new data frame in the variable called 'countTable'")
return(countTable)
}
countTable <- DESeq_table_maker("Documents/GitHub/DESeq-Packager/project_config.yaml")
DESeq_table_maker <- function(yaml, data_source){
#importing pepr project
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
type <- sample_frame[ , sample_name]
#prompting user to specify columns for DESeq Analysis
gene_name_col <- readline(prompt= "Specify which column in each data table is the gene name column: ")
relevant_data_col <- readline(prompt= "Specify which column contains the relevant data for DESeq analysis: ")
print("Packaging...")
#reading in the files
df_list <- vector(mode="list", length=length(files))
for(i in 1:length(files)){
sampleTable <- read.table(files[i], header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_")
df_list[[i]] <- sampleTable
}
print(str(df_list))
#function to merge the datatables in the list
countTable <- merge(df_list[[1]], df_list[[2]], by = gene_name_col)
for(i in 3:length(df_list)){
countTable <- merge(countTable, df_list[[i]])
}
print(str(countTable))
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
print("Finished! View the new data frame in the variable called 'countTable'")
return(countTable)
}
countTable <- DESeq_table_maker("Documents/GitHub/DESeq-Packager/project_config.yaml")
DESeq_table_maker <- function(yaml, data_source){
#importing pepr project
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
type <- sample_frame[ , sample_name]
#prompting user to specify columns for DESeq Analysis
gene_name_col <- readline(prompt= "Specify which column in each data table is the gene name column: ")
relevant_data_col <- readline(prompt= "Specify which column contains the relevant data for DESeq analysis: ")
print("Packaging...")
#reading in the files
df_list <- vector(mode="list", length=length(files))
for(i in 1:length(files)){
print(i)
sampleTable <- read.table(files[i], header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_")
df_list[[i]] <- sampleTable
}
print(str(df_list))
#function to merge the datatables in the list
countTable <- merge(df_list[[1]], df_list[[2]], by = gene_name_col)
for(i in 3:length(df_list)){
countTable <- merge(countTable, df_list[[i]])
}
print(str(countTable))
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
print("Finished! View the new data frame in the variable called 'countTable'")
return(countTable)
}
countTable <- DESeq_table_maker("Documents/GitHub/DESeq-Packager/project_config.yaml")
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
type <- sample_frame[ , sample_name]
p <- Project(file = yaml)
print(str(files))
DESeq_table_maker <- function(yaml, data_source){
#importing pepr project
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
type <- sample_frame[ , sample_name]
print(str(files))
#prompting user to specify columns for DESeq Analysis
gene_name_col <- readline(prompt= "Specify which column in each data table is the gene name column: ")
relevant_data_col <- readline(prompt= "Specify which column contains the relevant data for DESeq analysis: ")
print("Packaging...")
#reading in the files
df_list <- vector(mode="list", length=length(files))
for(i in 1:length(files)){
print(i)
sampleTable <- read.table(files[i], header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_")
df_list[[i]] <- sampleTable
}
print(str(df_list))
#function to merge the datatables in the list
countTable <- merge(df_list[[1]], df_list[[2]], by = gene_name_col)
for(i in 3:length(df_list)){
countTable <- merge(countTable, df_list[[i]])
}
print(str(countTable))
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
print("Finished! View the new data frame in the variable called 'countTable'")
return(countTable)
}
countTable <- DESeq_table_maker("Documents/GitHub/DESeq-Packager/project_config.yaml")
countTable <- DESeq_table_maker("Documents/GitHub/DESeq-Packager/project_config.yaml", "data_source")
View(countTable)
DESeq_table_maker <- function(yaml, data_source){
#importing pepr project
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
type <- sample_frame[ , sample_name]
#prompting user to specify columns for DESeq Analysis
gene_name_col <- readline(prompt= "Specify which column in each data table is the gene name column: ")
relevant_data_col <- readline(prompt= "Specify which column contains the relevant data for DESeq analysis: ")
print("Packaging...")
#reading in the files
df_list <- vector(mode="list", length=length(files))
for(i in 1:length(files)){
sampleTable <- read.table(files[i], header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- type[i]
df_list[[i]] <- sampleTable
}
#function to merge the datatables in the list
countTable <- merge(df_list[[1]], df_list[[2]], by = gene_name_col)
for(i in 3:length(df_list)){
countTable <- merge(countTable, df_list[[i]])
}
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
print("Finished! View the new data frame in the variable called 'countTable'")
return(countTable)
}
countTable <- DESeq_table_maker("Documents/GitHub/DESeq-Packager/project_config.yaml", "data_source")
cd desktop
q()
vignettes("DESeq")
vignette("DESeq")
install.packages(data.table)
install.packages(datatable)
install.packages("data.table")
example(data.table)
mtcarsDT
example(data.table)
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(data.table)
example(data.table)
View(DF)
DESeq_table_maker <- function(yaml, data_source, gene_name_col, relevant_data_col){
#importing pepr project
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
type <- sample_frame[ , sample_name]
dt_list <- vector(mode="list",length=length(files))
#checking for data table dependency and reading in files
if (requireNamespace("data.table")) {
print("in fread")
for(i in 1:length(files)){
sampleTable <- data.table::fread(files[i])
sampleTable <- sampleTable[, .(get(gene_name_col), get(relevant_data_col))]
sampleTable[[2]] <- as.integer(sampleTable[[2]])
names(sampleTable)[1] <- gene_name_col
names(sampleTable)[2] <- type[i]
dt_list[[i]] <- sampleTable
}
} else {
print("in read.table")
for(i in 1:length(files)){
sampleTable <- read.table(files[i])
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- type[i]
df_list[[i]] <- sampleTable
}
}
print("done reading")
#function to merge the datatables in the list
countTable <- merge(dt_list[[1]], dt_list[[2]], by = gene_name_col)
for(i in 3:length(dt_list)){
countTable <- merge(countTable, dt_list[[i]])
}
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
return(countTable)
}
countTable <- DESeq_table_maker("project_config.yaml", "data_source", "ensembl_gene_id", "FPKM")
setwd("/Users/AG/Documents/GitHub/DESeq-Packager")
countTable <- DESeq_table_maker("project_config.yaml", "data_source", "ensembl_gene_id", "FPKM")
countTable <- DESeq_table_maker("project_config.yaml", "data_source", "ensembl_gene_id", "FPKM")
column
samp[[column]]
samp
DESeq_table_maker <- function(yaml, data_source, gene_name_col, relevant_data_col){
#importing pepr project
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
type <- sample_frame[ , sample_name]
dt_list <- vector(mode="list",length=length(files))
#checking for data table dependency and reading in files
if (requireNamespace("data.table")) {
print("in fread")
for(i in 1:length(files)){
sampleTable <- data.table::fread(files[i])
sampleTable <- sampleTable[, .(get(gene_name_col), get(relevant_data_col))]
sampleTable[[2]] <- as.integer(sampleTable[[2]])
names(sampleTable)[1] <- gene_name_col
names(sampleTable)[2] <- type[i]
dt_list[[i]] <- sampleTable
}
} else {
print("in read.table")
for(i in 1:length(files)){
sampleTable <- read.table(files[i], headers = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- type[i]
df_list[[i]] <- sampleTable
}
}
print("done reading")
#function to merge the datatables in the list
countTable <- merge(dt_list[[1]], dt_list[[2]], by = gene_name_col)
for(i in 3:length(dt_list)){
countTable <- merge(countTable, dt_list[[i]])
}
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
return(countTable)
}
countTable <- DESeq_table_maker("project_config.yaml", "data_source", "ensembl_gene_id", "FPKM")
DESeq_table_maker <- function(yaml, data_source, gene_name_col, relevant_data_col){
#importing pepr project
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
type <- sample_frame[ , sample_name]
dt_list <- vector(mode="list",length=length(files))
#checking for data table dependency and reading in files
if (requireNamespace("data.table")) {
print("in fread")
for(i in 1:length(files)){
sampleTable <- data.table::fread(files[i])
sampleTable <- sampleTable[, .(get(gene_name_col), get(relevant_data_col))]
sampleTable[[2]] <- as.integer(sampleTable[[2]])
names(sampleTable)[1] <- gene_name_col
names(sampleTable)[2] <- type[i]
dt_list[[i]] <- sampleTable
}
} else {
print("in read.table")
for(i in 1:length(files)){
sampleTable <- read.table(files[i], header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- type[i]
df_list[[i]] <- sampleTable
}
}
print("done reading")
#function to merge the datatables in the list
countTable <- merge(dt_list[[1]], dt_list[[2]], by = gene_name_col)
for(i in 3:length(dt_list)){
countTable <- merge(countTable, dt_list[[i]])
}
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
return(countTable)
}
countTable <- DESeq_table_maker("project_config.yaml", "data_source", "ensembl_gene_id", "FPKM")
install.packages("data.table")
DESeq_table_maker <- function(yaml, data_source, gene_name_col, relevant_data_col){
#importing pepr project
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = yaml)
sample_frame <- samples(p)
files <- sample_frame[ , data_source]
type <- sample_frame[ , sample_name]
dt_list <- vector(mode="list",length=length(files))
#checking for data table dependency and reading in files
if (requireNamespace("data.table")) {
print("in fread")
for(i in 1:length(files)){
sampleTable <- data.table::fread(files[i])
sampleTable <- sampleTable[, .(get(gene_name_col), get(relevant_data_col))]
sampleTable[[2]] <- as.integer(sampleTable[[2]])
names(sampleTable)[1] <- gene_name_col
names(sampleTable)[2] <- type[i]
dt_list[[i]] <- sampleTable
}
} else {
print("in read.table")
for(i in 1:length(files)){
sampleTable <- read.table(files[i], header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #integers are required for DESeq
names(sampleTable)[2] <- type[i]
df_list[[i]] <- sampleTable
}
}
print("done reading")
#function to merge the datatables in the list
countTable <- merge(dt_list[[1]], dt_list[[2]], by = gene_name_col)
for(i in 3:length(dt_list)){
countTable <- merge(countTable, dt_list[[i]])
}
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
return(countTable)
}
countTable <- DESeq_table_maker("project_config.yaml", "data_source", "ensembl_gene_id", "FPKM")
View(countTable)
