trees
str(trees)
head(trees)
trees$Girth
[trees$Girth,]
trees$Girth,
trees[$Girth,]
trees[,trees$Girth]
trees[trees$Girth,]
trees
trees[trees$Girth > 10]
trees[trees$Girth > 10,]
trees[trees$Girth < 10,]
?scatterplot=
?scatterplot=
?scatterplot
?scatter
plot(trees$Girth, trees$Height)
plot(trees$Girth, trees$Height, main = "Tree Height vs. Girth", xlab = "Girth", ylab = "Height")
plot(trees$Girth, trees$Volume, main = "Tree Height vs. Girth", xlab = "Girth", ylab = "Height")
plot(trees$Girth, trees$Volume, main = "Tree Volume vs. Girth", xlab = "Girth", ylab = "Volume")
?car
packages(car)
package(car)
library(car)
?sunflowerplot
sunflowerplot(trees$Girth, trees$Volume)
scatterplot3d(trees$Girth, trees$Height, trees$Volume)
library(scatterplot3d)
scatterplot3d(trees$Girth, trees$Height, trees$Volume)
iris[(numRows-1):numRows, (numCols-1):numCols]
numCols = ncol(iris)
numRows = nrow(iris)
iris[(numRows-1):numRows, (numCols-1):numCols]
iris[iris$Sepal.Width>3,]
iris[iris$Sepal.Width>3.5,]
iris[which(iris$Sepal.Width >3),]
iris[which(iris$Sepal.Width >3.5),]
iris[iris$Sepal.Width>3.5,]
?which
set.seed(100)
iris[iris$Species = versicolor,]
?subset
subset(iris$Species = versicolor)
subset(iris$Species)
subset(iris, versicolor)
iris[iris$Species ==versicolor,]
iris[iris$Species == "versicolor",]
Df1 = iris[sample(1:nrow(iris), 10), c(1, 2, 3, 5)]
View(Df1)
View(Df1)
?sample
Df2 = iris[sample(1:nrow(iris), 10), c(1, 2, 4, 5)] #no petal length
Df1 =
clear
Df1 =
clc
Df2 = Df2[sample(1:nrow(Df2), 3), 4]
Df2 = Df2[sample(1:nrow(Df2), 3), 4] #returns the species of 3 random flowers
Df1 = Df1[sample(1:nrow(Df1), 3), 4] #returns the species of 3 random flowers
Df1 = iris[sample(1:nrow(iris), 10), c(1, 2, 3, 5)] #random sample of 10 rows of columns 1, 2, 3, and 5 (no petal width)
Df1 = Df1[sample(1:nrow(Df1), 3), 4] #returns the species of 3 random flowers
Df1 = iris[sample(1:nrow(iris), 10), c(1, 2, 3, 5)] #random sample of 10 rows of columns 1, 2, 3, and 5 (no petal width)
Df1 = Df1[sample(1:nrow(Df1), 3), 4] #returns the species of 3 random flowers
?merge
merge(Df1, Df2)
merge(Df2, Df1)
merge(Df1, Df2, by = "Species", all= TRUE)
merge(Df1, Df2, by = "Species", all= TRUE)
merge(Df1, Df2, by = "Species", all= FALSE)
merge(Df1, Df2, all= FALSE)
merge(Df1, Df2, all= TRUE)
merge(Df1, Df2, all.y= TRUE)
?paste
?rep
paste( c( rep("var", 3), rep("pred", 3) ) )
paste( c( rep("var", 3), rep("pred", 3) ), 1:3 )
?paste
paste( c( rep("var", 3), rep("pred", 3) ), 1:3, 1:3 )
paste( c( rep("var", 3), rep("pred", 3) ),1:3,1:3 )
paste( c( rep("var",3), rep("pred",3) ),1:3,1:3 )
?table
table(iris$Species, iris$Sepal.Width)
x = table(iris$Species, iris$Sepal.Width)
plot(x)
?median
median(x)
median(x.rows)
median(x$setosa)
median(iris$Species)
median(iris$Sepal.Length)
mean(iris$Petal.Width)
mean(iris$Sepal.Length)
for(row in 1:nrows(iris)){
if(iris[row,1] > 5){
iris[row, 6] = "greater than 5"
}
else{
iris[row, 6] = "less than 5"
}
}
for(row in 1:nrow(iris)){
if(iris[row,1] > 5){
iris[row, 6] = "greater than 5"
}
else{
iris[row, 6] = "less than 5"
}
}
for(row in 1:nrow(iris)){
if(iris[row,1] > 5){
iris[row, 6] = "greater than 5"
}
else{
iris[row, 6] = "less than 5"
}
}
View(iris)
View(iris)
print("less than 5")
for(row in 1:nrow(iris)){
if(iris[row,1] > 5){
print("greater than 5")
}
else{
print("less than 5")
}
}
for(row in c(1:nrow(iris)){
if(iris[row,1] > 5){
print("greater than 5")
}
else{
print("less than 5")
}
}
set.seed(100)
?sample
Df1 = iris[sample(1:nrow(iris), 10), c(1, 2, 3, 5)] #random sample of 10 rows of columns 1, 2, 3, and 5 (no petal width)
Df2 = iris[sample(1:nrow(iris), 10), c(1, 2, 4, 5)] #no petal length
Df1 = Df1[sample(1:nrow(Df1), 3), 4] #returns the species of 3 random flowers
Df2 = Df2[sample(1:nrow(Df2), 3), 4] #returns the species of 3 random flowers
?merge
merge(Df1, Df2)
merge(Df2, Df1)
merge(Df1, Df2, all.y= TRUE)
?paste
?rep
paste( c( rep("var",3), rep("pred",3) ),1:3,1:3 )
trees
str(trees)
head(trees)
trees[trees$Girth,]
trees
trees[trees$Girth > 10]
trees[trees$Girth < 10,]
?scatterplot=
?scatterplot
?scatter
plot(trees$Girth, trees$Volume, main = "Tree Volume vs. Girth", xlab = "Girth", ylab = "Volume")
?car
packages(car)
library(car)
?sunflowerplot
sunflowerplot(trees$Girth, trees$Volume)
library(scatterplot3d)
scatterplot3d(trees$Girth, trees$Height, trees$Volume)
for(row in 1:nrow(iris)){
if(iris[row,1] > 5){
print("greater than 5")
}
else{
print("less than 5")
}
}
output = ifelse(iris$Sepal.Length > 5, "greater than 5", "lesser than 5")
?apply
myFunc = function(x){
if(x['Sepal.Length'] > 5){
"greater than 5"
}
else{
"lesser than 5"
}
}
output = apply(iris, 1, FUN = myFunc)
myFunc = function(x){
if(x['Sepal.Length'] > 5){
"greater than 5"
}
else{
"lesser than 5"
}
};
output = apply(iris, 1, FUN = myFunc)
output
biocLite("DESeq")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq")
browseVignettes("DESeq")
biocLite("pasilla")
datafile <- system.file("extdata/pasilla_gene_counts.tsv", package = "pasilla")
datafile
pasillaCountTable <- read.table(datafile, header = TRUE, row.names=1) #First column
head(pasillaCountTable)
pasillaDesign
pasillaDesign = data.frame(
row.names = colnames(pasillaCountTable),
condition = c("untreated", "untreated", "untreated",
"untreated", "treated", "treated", "treated"),
libType = c("single-end", "single-end", "paired-end",
"paired-end", "single-end", "paired-end", "paired-end")
)
pasillaDesign
pairedSamples = pasillaDesign$libType == "paired-end"
countTable = pasillaCountTable[, pairedSamples] #creates a dataframe of only the paired samples
?condition
head(countTable)
condition
condition = pasillaDesign$condition[pairedSamples] #creates a vector of the paired samples
condition
biocLite("pasilla")
?system.file
datafile <- system.file("extdata/pasilla_gene_counts.tsv", package = "pasilla")
datafile
condition = c("untreated", "untreated", "untreated", "untreated", "treated", "treated", "treated")
pasillaDesign = data.frame(
row.names = colnames(pasillaCountTable),
condition = condition,
libType = ends
)
ends = c("single-end", "single-end", "paired-end", "paired-end",
"single-end", 'single-end', 'paired-end', 'paired-end')
pasillaDesign = data.frame(
row.names = colnames(pasillaCountTable),
condition = condition,
libType = ends
)
ends = c("single-end", "single-end", "paired-end", "paired-end",
"single-end", 'single-end', 'paired-end')
ends = c("single-end", "single-end", "paired-end", "paired-end",
"single-end", 'single-end', 'paired-end')
pasillaDesign = data.frame(
row.names = colnames(pasillaCountTable),
condition = condition,
libType = ends
)
pasillaDesign
head(pairedSamples)
pasillaDesign
pairedSamples = pasillaDesign$libType == "paired-end"
countTable = pasillaCountTable[ , pairedSamples] #creates a dataframe of only the paired samples
View(countTable)
View(countTable)
treatedSamples = pasillaDesign$condition == "treated"
pairedSamples = pasillaDesign$libType != "paired-end"
unpairedSamples = pasillaDesign$libType != "paired-end"
countTable = pasillaCountTable[ , unpairedSamples] #creates a dataframe of only the paired samples
treatedSamples = pasillaDesign[ 5:7, ]
countTable1 = pasillaCountTable[ , unpairedSamples] #creates a dataframe of only the paired samples
treatedSamples = pasillaDesign$condition = "treated"
treatedSamples = pasillaDesign$condition == "treated"
conditions = c("untreated", "untreated", "untreated", "untreated", "treated", "treated", "treated")
pasillaDesign = data.frame(
row.names = colnames(pasillaCountTable),
condition = conditions,
libType = ends
)
treatedSamples = pasillaDesign$condition == "treated"
countTable2 = pasillaCountTable[ , treatedSamples]
condition = pasillaDesign$condition[unpairedSamples] #creates a vector of the paired samples
condition
countTable2 = pasillaCountTable[ , treatedSamples]
countTable1 = pasillaCountTable[ , unpairedSamples] #creates a dataframe of only the paired samples
head(countTable1)
head(countTable2)
library("DESeq")
cds <- newCountDataSet(countTable1, condition) #instantiate count data set
cds
cds <- estimateSizeFactors(cds) #estimate library size
sizeFactors(cds)
head(counts(cds,normalized = TRUE)) #divide each column of count table by size factor
cds <- estimateDispersions(cds) # 1. estimates dispersion value for each gene
str(fitInfo(cds))
plotDispEsts(cds)
res <- nbinomTest(cds, "untreated", "treated")
head(res)
head(res)
plotMA(res)
plotDispEsts(cds)
cds <- estimateDispersions(cds) # 1. estimates dispersion value for each gene
str(fitInfo(cds))
plotDispEsts(cds)
install.packages("readr")
library(readr)
install.packages("data.table")
library(data.table)
install.packages("plyr")
library(plyr)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq")
dt <- fread(EWSfile)
dt <- subset(dt, select = c("ensembl_gene_id", "FPKM"))
dt <- dt[, FPKM:=as.integer(FPKM)]
dt <- rename(dt, c("FPKM" = paste(type, "FPKM", sep = "_")))
return(dt)
}
setup_datafiles <- function(EWSfile, type){
dt <- fread(EWSfile)
dt <- subset(dt, select = c("ensembl_gene_id", "FPKM"))
dt <- dt[, FPKM:=as.integer(FPKM)]
dt <- rename(dt, c("FPKM" = paste(type, "FPKM", sep = "_")))
return(dt)
}
install.packages("readr")
library(readr)
install.packages("data.table")
library(data.table)
install.packages("plyr")
library(plyr)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq")
a
install.packages("readr")
vignette("DESeq")
setup_datafiles <- function(EWSfile, type){
dt <- fread(EWSfile)
dt <- subset(dt, select = c("ensembl_gene_id", "FPKM"))
dt <- dt[, FPKM:=as.integer(FPKM)]
dt <- rename(dt, c("FPKM" = paste(type, "FPKM", sep = "_")))
return(dt)
}
DMSO <- setup_datafiles("RNA_EWS-FLI1_High_DMSO_rep1.tsv", "DMSO")
Romidepsin <- setup_datafiles("RNA_EWS-FLI1_High_Romidepsin_rep1.tsv", "Romidepsin")
Entinostat <- setup_datafiles("RNA_EWS-FLI1_High_Entinostat_rep1.tsv", "Entinostat")
install.packages("plyr")
setup_datafiles <- function(EWSfile, type){
dt <- fread(EWSfile)
dt <- subset(dt, select = c("ensembl_gene_id", "FPKM"))
dt <- dt[, FPKM:=as.integer(FPKM)]
dt <- rename(dt, c("FPKM" = paste(type, "FPKM", sep = "_")))
return(dt)
}
DMSO <- setup_datafiles("RNA_EWS-FLI1_High_DMSO_rep1.tsv", "DMSO")
library(plyr)
DMSO <- setup_datafiles("RNA_EWS-FLI1_High_DMSO_rep1.tsv", "DMSO")
setup_datafiles <- function(EWSfile, type){
dt <- fread(EWSfile)
dt <- subset(dt, select = c("ensembl_gene_id", "FPKM"))
dt <- dt[, FPKM:=as.integer(FPKM)]
dt <- rename(dt, c("FPKM" = paste(type, "FPKM", sep = "_")))
return(dt)
}
DMSO <- setup_datafiles("RNA_EWS-FLI1_High_DMSO_rep1.tsv", "DMSO")
install.packages("readr")
install.packages("readr")
library(readr)
install.packages("data.table")
library(data.table)
install.packages("plyr")
library(plyr)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq")
source("https://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
install.packages("swirl")
library("swirl")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
?formula
lm(child~parent,galton)
?lm
lm(child~parent, galton)
regrline <- lm(child~parent, galton)
?abline
abline(regrline, lwd=3, col='red')
summary(regrline)
swirl::install_course("Advanced R Programming")
library('swirl')
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
devtools::install_github("pepkit/pepr")
force = TRUE
rm(list = force)
rm(force)
devtools::install_github("pepkit/pepr", force = TRUE)
p <- Project("project_config.yaml")
p <- pepr::Project("project_config.yaml")
setwd(/Users/AG/Documents/Github/DESeq-Packager)
setwd(Users/AG/Documents/Github/DESeq-Packager)
setwd("/Users/AG/Documents/Github/DESeq-Packager")
p <- pepr::Project("project_config.yaml")
p <- pepr::Project("project_config.yaml")
samples(p)
p::samples(p)
pepr::samples(p)
samples(p)[[1]]
library(pepr)
samples(p)[[1]]
samples(p)[[2]]
samples(p)[[3]]
samples(p)[[data_source]]
samples(p)[["data_source""]]
samples(p)[["data_source"]]
samples(p)[["data_source"]]
as.list(samples(p))
sample_list <- as.list(samples(p))
sample_list[[data_source]]
sample_list[["data_source"]]
