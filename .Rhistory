submit()
my_mean(c(4,5,10))
??fread
devtools::install_github("pepkit/pepr")
library(pepr)
p <- Project(file = "project_config.yaml")
setwd(/Users/AG/Documents/Github/DESeq-Packager)
setwd("/Users/AG/Documents/Github/DESeq-Packager")
p <- Project(file = "project_config.yaml")
as.list(samples(p))
sample_list <- as.list(samples(p))
sample_list <- as.vector(samples(p))
View(sample_list)
sample_list <- samples(p)
View(sample_list)
sample_list <- samples(p)
sample_frame <- samples(p)
rm(sample_list)
files <- sample_frame(data_source)
files <- sample_frame[,data_source]
files
files(1)
files[1]
?plyr
plyr
install.packages("data.table")
install.packages("data.table")
library("data.table")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq")
files <- c("RNA_EWS-FLI1_High_DMSO_rep1.tsv", "RNA_EWS-FLI1_High_DMSO_rep2.tsv", "RNA_EWS-FLI1_High_rep1.tsv", "RNA_EWS-FLI1_High_rep2.tsv")
files <- sample_frame[ , data_source]
treatment <- sample_frame[ , treatment_drug]
gene_name_col <- "ensembl_gene_id"
relevant_data_col <- "FPKM"
(9+8+8+6+8+8.67+9+7+3+9+7)/(10+10+10+7+10+10+10+9+9+3+10+8)
(9+8+8+6+8+8.67+9+7+3+9+7)/(10+10+10+7+10+10+9+9+3+10+8)
(90.32*.15+88.18*.15+98.11*.2+.1+.1+.1*86.11+90*.2)
(90.32*.15+88.18*.15+98.11*.2+10+10+.1*86.11+90*.2)
p <- Project(file = "project_config.yaml")
sample_frame <- samples(p)
p <- Project(file = "project_config.yaml")
sample_frame <- samples(p)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- readr::fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
dt[[2]] <- as.integer(dt[[2]]) #convert the data to integers, required for DESeq
names(dt)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- dt #add datatable to the list
i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
alphabet <- c("a", "b", "c")
numbers <- c(1, 2, 3)
paste(alphabet, numbers)
paste(alphabet, numbers, sep = "")
random <- c("1", "s", "ff")
paste(alphabet, numbers, random, sep = "")
type <- paste(sample_frame[, ews_fli1], sample_frame[ , treatment_drug], sample_frame[ , rep], sep = "")
type
gene_name_col <- "ensembl_gene_id"
relevant_data_col <- "FPKM"
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- readr::fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
dt[[2]] <- as.integer(dt[[2]]) #convert the data to integers, required for DESeq
names(dt)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- dt #add datatable to the list
i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
dt <- fread(file)
dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
dt[[2]] <- as.integer(dt[[2]]) #convert the data to integers, required for DESeq
names(dt)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- dt #add datatable to the list
i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
merging <- function(list){
countTable <- merge(list[[1]], list[[2]], by = gene_name_col)
for(i in 3:length(list)){
countTable <- merge(countTable, list[[i]])
}
return(countTable)
}
list_files[[1]]
list_files[[2]]
list_files[[3]]
list_files[[4]]
list_files[[5]]
list_files[[6]]
rm(alphabet, numbers, random)
countTable <- merging(list_files)
View(countTable)
countTable <- countTable[,2:ncol(countTable)]
row.names(countTable) <- countTable[, 1]
data.frame(c(1,2,3),c(4,5,6),c(7,8,9))
x<-data.frame(c(1,2,3),c(4,5,6),c(7,8,9))
row.names(x) <- c("a","b", "C")
x
countTable[, 1]
countTable <- merging(list_files)
countTable[, 1]
row.names(countTable) <- countTable[, 1]
View(countTable)
length(countTable[,1])
countTable[,1]
v<-countTable[,1]
v
length(v)
v<-as.vector(countTable[,1])
length(v)
v
v<-c(1,2,3)
length(v)
v<-as.list(countTable[,1])
length(v)
rownames(countTable) <- countTable[, 1]
View(countTable)
countTable <- merging(list_files)
View(countTable)
countTable <- countTable[,-1]
View(countTable)
countTable <- merging(list_files)
rownames(countTable) <- countTable[, 1]
rownames(countTable)
x[,1]
sample_frame[,1]
countTable[,1]
countTable[1]
countTable[1,]
countTable[,1]
as.vector(countTable[,1])
length(as.vector(countTable[,1]))
height(as.vector(countTable[,1]))
str(countTable)
str(x)
length(as.vector(countTable$ensembl_gene_id)
length(as.vector(countTable$ensembl_gene_id))
length(as.vector(countTable$ensembl_gene_id))
as.vector(countTable$ensembl_gene_id)
countTable$ensembl_gene_id
countTable[,1]
rownames(countTable) <- countTable$gene_name_col
countTable <- countTable[,-1]
View(countTable)
countTable <- merging(list_files)
View(countTable)
row.names(countTable) <- countTable$gene_name_col
View(countTable)
str(countTable)
str(x)
View(x)
row.names(countTable)[1] <- "a"
View(countTable)
row.names(countTable) <- countTable$gene_name_col
View(countTable)
row.names(countTable) <- countTable$LowNo1_FPKM
row.names(countTable) <- sample_frame$sample_id
View(sample_frame)
row.names(countTable) <- countTable$gene_name_col
row.names(countTable) <- countTable$(gene_name_col)
row.names(countTable) <- countTable$1
class(countTable[,1])
class(countTable[[,1]])
class(countTable[[1]])
countTable[[1]]
row.names(countTable) <- countTable[[1]]
View(countTable)
countTable <- countTable[,-1]
row.names(countTable) <- countTable[[1]]
countTable <- merging(list_files)
row.names(countTable) <- countTable[[1]]
countTable[[1]]
countTable <- merging(list_files)
View(countTable)
row.names(countTable) <- countTable[[1]]
countTable[,-1]
View(countTable)
countTable[,1] <- NULL
View(countTable)
x <- data.frame(names=c(aaron, emily, cho, peter), bdays = c(10,3,12,3))
x <- data.frame(names=c("aaron", "emily", "cho", "peter"), bdays = c(10,3,12,3))
x <- x$names
x <- data.frame(names=c("aaron", "emily", "cho", "peter"), bdays = c(10,3,12,3), foo = c(1,2,3,4))
x<- x[ , names]
x<- x[ , names]
x<- x[ , bdays]
x
row.names(x) <- c("me", "her", "friend1", "friend2")
x
x[me,]
x[1]
x[1,]
x.getColumn(names)
getColumn(names, x)
?substitute
df <- read.table(RNA_EWS-FLI1_High_Vorinostat_rep2.tsv)
df <- substitute(df[a], list(a=gene_name_col))
df <- read.table("RNA_EWS-FLI1_High_Vorinostat_rep2.tsv")
df <- substitute(df[a], list(a=gene_name_col))
getwd()
df <- read.table("/Users/AG/Documents/GitHub/DESeq-Packager/expr_tsv/RNA_EWS-FLI1_High_Vorinostat_rep2.tsv")
df <- substitute(df[a], list(a=gene_name_col))
df <- read.table(RNA_EWS-FLI1_High_Vorinostat_rep2.tsv)
df <- substitute(df$a, list(a=gene_name_col))
df <- read.table("/Users/AG/Documents/GitHub/DESeq-Packager/expr_tsv/RNA_EWS-FLI1_High_Vorinostat_rep2.tsv")
df <- substitute(df$a, list(a=gene_name_col))
y <- names
x[y]
x[,y]
x[names]
x
x(names)
x[names]
x[,names]
x[,bdays]
x[me]
x[bdays]
x[foo]
x["names"]
y<-"names"
x[y]
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
df <- read.table(file)
df <- df[, c(gene_name_col, relevant_data_col)]
#dt <- fread(file)
#dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
df[[2]] <- as.integer(df[[2]]) #convert the data to integers, required for DESeq
names(df)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- df #add datatable to the list
i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
gene_name_col <- "ensembl_gene_id"
relevant_data_col <- "FPKM"
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
df <- read.table(file)
#df <- df[, c(gene_name_col, relevant_data_col)]
#dt <- fread(file)
#dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
df[[2]] <- as.integer(df[[2]]) #convert the data to integers, required for DESeq
names(df)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- df #add datatable to the list
i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
df <- read.table(file)
#df <- df[, c(gene_name_col, relevant_data_col)]
#dt <- fread(file)
#dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
#df[[2]] <- as.integer(df[[2]]) #convert the data to integers, required for DESeq
#names(df)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- df #add datatable to the list
#i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
df <- read.table("RNA_EWS-FLI1_High_Vorinostat_rep2.tsv")
df <- read.table("rep_tsv/RNA_EWS-FLI1_High_Vorinostat_rep2.tsv")
df <- read.table("expr_tsv/RNA_EWS-FLI1_High_Vorinostat_rep2.tsv")
View(df)
gene_col<-"ensembl_gene_id"
data_col<-"FPKM"
df <- df[,c(gene_col, data_col)]
df<-df[,gene_col]
df[,gene_col]
gene_col<-c("ensembl_gene_id")
df[,gene_col]
dplyr::select(df, gene_col)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
df <- read.table(file, header = TRUE)
df <- df[, c(gene_name_col, relevant_data_col)]
#dt <- fread(file)
#dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
#df[[2]] <- as.integer(df[[2]]) #convert the data to integers, required for DESeq
#names(df)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- df #add datatable to the list
#i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
files
getwd()
list_files[1]
head(list_files[[1]])
head(list_files[1])
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
i <- 1
for(file in file_vector){
df <- read.table(file, header = TRUE)
df <- df[, c(gene_name_col, relevant_data_col)]
#dt <- fread(file)
#dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
df[[2]] <- as.integer(df[[2]]) #convert the data to integers, required for DESeq
names(df)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- df #add datatable to the list
i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
list_files
head(list_Files)
head(list_files)
merging <- function(list){
countTable <- merge(list[[1]], list[[2]], by = gene_name_col)
for(i in 3:length(list)){
countTable <- merge(countTable, list[[i]])
}
return(countTable)
}
countTable <- merging(list_files)
View(countTable)
View(df)
merging <- function(list){
countTable <- merge(list[[1]], list[[2]], by = gene_name_col)
for(i in 3:length(list)){
countTable <- merge(countTable, list[[i]])
}
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
}
countTable <- merging(list_files)
merging <- function(list){
countTable <- merge(list[[1]], list[[2]], by = gene_name_col)
for(i in 3:length(list)){
countTable <- merge(countTable, list[[i]])
}
#set the row names as the gene names, then remove the gene name column
row.names(countTable) <- countTable[[1]]
countTable[,1] <- NULL
return(countTable)
}
countTable <- merging(list_files)
View(countTable)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
#use data table if it is installed
if (requireNamespace("data.table")) {
sampleReadFunc = data.table::fread
} else {
sampleReadFunc = read.table
}
i <- 1
for(file in file_vector){
sampleTable <- sampleReadFunc(file, header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
#dt <- fread(file)
#dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #convert the data to integers, required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- sampleTable #add datatable to the list
i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
warnings()
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
sampleReadFunc=read.table
#use data table if it is installed
# if (requireNamespace("data.table")) {
#   sampleReadFunc = data.table::fread
# } else {
#   sampleReadFunc = read.table
# }
i <- 1
for(file in file_vector){
sampleTable <- sampleReadFunc(file, header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
#dt <- fread(file)
#dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #convert the data to integers, required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- sampleTable #add datatable to the list
i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
rm(df)
View(sample_frame)
View(sample_frame)
rm(v, y)
sampleReadFunc=data.table::fread
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
sampleReadFunc=data.table::fread
#use data table if it is installed
# if (requireNamespace("data.table")) {
#   sampleReadFunc = data.table::fread
# } else {
#   sampleReadFunc = read.table
# }
i <- 1
for(file in file_vector){
sampleTable <- sampleReadFunc(file)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
#dt <- fread(file)
#dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #convert the data to integers, required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- sampleTable #add datatable to the list
i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
warnings()
list_files
sample_table <- fread("Users/AG/Documents/Github/DESeq-Packager")
sample_table <- fread("Users/AG/Documents/Github/DESeq-Packager/expr_tsv/RNA_EWS-FLI1_High_Vorinostat_rep1.tsv")
getwd()
sample_table <- fread("/Users/AG/Documents/Github/DESeq-Packager/expr_tsv/RNA_EWS-FLI1_High_Vorinostat_rep1.tsv")
View(sample_table)
sample_table <- sample_table[, c(gene_name_col, relevant_data_col)]
sample_table <- fread("/Users/AG/Documents/Github/DESeq-Packager/expr_tsv/RNA_EWS-FLI1_High_Vorinostat_rep1.tsv")
sample_table[,gene_name_col]
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
sampleReadFunc=read.table
#use data table if it is installed
# if (requireNamespace("data.table")) {
#   sampleReadFunc = data.table::fread
# } else {
#   sampleReadFunc = read.table
# }
i <- 1
for(file in file_vector){
sampleTable <- sampleReadFunc(file)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
#dt <- fread(file)
#dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #convert the data to integers, required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- sampleTable #add datatable to the list
i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
sampleReadFunc=read.table
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
setup_datafiles <- function(file_vector, type, gene_name_col, relevant_data_col){
output <- vector(mode = "list", length = length(file_vector)) #creates empty list
sampleReadFunc=read.table
#use data table if it is installed
# if (requireNamespace("data.table")) {
#   sampleReadFunc = data.table::fread
# } else {
#   sampleReadFunc = read.table
# }
i <- 1
for(file in file_vector){
sampleTable <- sampleReadFunc(file, header = TRUE)
sampleTable <- sampleTable[, c(gene_name_col, relevant_data_col)]
#dt <- fread(file)
#dt <- subset(dt, select = c(gene_name_col, relevant_data_col)) #leave only the geneID and the relevant data
sampleTable[[2]] <- as.integer(sampleTable[[2]]) #convert the data to integers, required for DESeq
names(sampleTable)[2] <- paste(type[i], relevant_data_col, sep = "_") #rename columns in datatable to the type of data (ex: HighDMSO1_FPKM)
output[[i]] <- sampleTable #add datatable to the list
i <- i+1 #increment to access the next element in the type vector
}
return(output)
}
list_files <- setup_datafiles(files, type, gene_name_col, relevant_data_col)
(90.32*.15+88.18*.15+89.9*.2+98.11*.2+10+10+84.59*.1)
(9+8+8+6+8+8.67+9+7+3+9+7)/(10+10+10+7+10+10+9+9+3+10+8)
(90.32*.15+88.18*.15+89.9*.2+98.11*.2+10+10+86.11*.1)
(90.32*.15+88.18*.15+91.9*.2+98.11*.2+10+10+86.11*.1)
